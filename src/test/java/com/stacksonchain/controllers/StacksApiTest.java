/*
 * StacksData API
 * Stacksdata provides various information about Stacks blockchain through REST API. The data is as real-time as it appears on Stacks node. Finalized blocks, transactions and corresponding events are visible once the consensus is reached. This document describes what information is available and how to query it to produce various reports and dashboards.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@stacksdata.info
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.stacksonchain.controllers;

import com.stacksonchain.model.BlockSpec;
import com.stacksonchain.model.Dataset;
import com.stacksonchain.model.PriceSpec;
import com.stacksonchain.model.RunRequest;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for StacksApi
 */
@Ignore
public class StacksApiTest {

    private final StacksApi api = new StacksApi();

    /**
     * 
     *
     * Returns the latest block number.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void blockTest() throws Exception {
        BlockSpec response = api.block();

        // TODO: test validations
    }
    /**
     * 
     *
     * Fetched latest prices for corresponding symbol.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void priceTest() throws Exception {
        String symbol = null;
        String from = null;
        String to = null;
        List<PriceSpec> response = api.price(symbol, from, to);

        // TODO: test validations
    }
    /**
     * 
     *
     * Runs a predefined report, the report might use provided blockHeight. If blockHeight is not specified the latest one is assumed.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void runTest() throws Exception {
        RunRequest body = null;
        Dataset response = api.run(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Runs a predefined time-series report (e.g. price feed).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void tsTest() throws Exception {
        RunRequest body = null;
        Dataset response = api.ts(body);

        // TODO: test validations
    }
}
