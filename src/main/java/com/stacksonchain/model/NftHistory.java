/*
 * StacksData API
 * Stacksdata provides various information about Stacks blockchain through REST API. The data is as real-time as it appears on Stacks node. Finalized blocks, transactions and corresponding events are visible once the consensus is reached. This document describes what information is available and how to query it to produce various reports and dashboards.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@stacksdata.info
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.stacksonchain.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * NftHistory
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-03-25T15:36:22.741800281-07:00[America/Los_Angeles]")
public class NftHistory {
  @SerializedName("block_height")
  private Integer blockHeight = null;

  @SerializedName("block_time")
  private String blockTime = null;

  @SerializedName("tx_hash")
  private String txHash = null;

  @SerializedName("sender")
  private String sender = null;

  @SerializedName("recipient")
  private String recipient = null;

  @SerializedName("contract")
  private String contract = null;

  @SerializedName("asset_event_type")
  private String assetEventType = null;

  @SerializedName("value")
  private String value = null;

  public NftHistory blockHeight(Integer blockHeight) {
    this.blockHeight = blockHeight;
    return this;
  }

   /**
   * Get blockHeight
   * @return blockHeight
  **/
  @Schema(description = "")
  public Integer getBlockHeight() {
    return blockHeight;
  }

  public void setBlockHeight(Integer blockHeight) {
    this.blockHeight = blockHeight;
  }

  public NftHistory blockTime(String blockTime) {
    this.blockTime = blockTime;
    return this;
  }

   /**
   * Get blockTime
   * @return blockTime
  **/
  @Schema(description = "")
  public String getBlockTime() {
    return blockTime;
  }

  public void setBlockTime(String blockTime) {
    this.blockTime = blockTime;
  }

  public NftHistory txHash(String txHash) {
    this.txHash = txHash;
    return this;
  }

   /**
   * Get txHash
   * @return txHash
  **/
  @Schema(description = "")
  public String getTxHash() {
    return txHash;
  }

  public void setTxHash(String txHash) {
    this.txHash = txHash;
  }

  public NftHistory sender(String sender) {
    this.sender = sender;
    return this;
  }

   /**
   * Get sender
   * @return sender
  **/
  @Schema(description = "")
  public String getSender() {
    return sender;
  }

  public void setSender(String sender) {
    this.sender = sender;
  }

  public NftHistory recipient(String recipient) {
    this.recipient = recipient;
    return this;
  }

   /**
   * Get recipient
   * @return recipient
  **/
  @Schema(description = "")
  public String getRecipient() {
    return recipient;
  }

  public void setRecipient(String recipient) {
    this.recipient = recipient;
  }

  public NftHistory contract(String contract) {
    this.contract = contract;
    return this;
  }

   /**
   * Get contract
   * @return contract
  **/
  @Schema(description = "")
  public String getContract() {
    return contract;
  }

  public void setContract(String contract) {
    this.contract = contract;
  }

  public NftHistory assetEventType(String assetEventType) {
    this.assetEventType = assetEventType;
    return this;
  }

   /**
   * Get assetEventType
   * @return assetEventType
  **/
  @Schema(description = "")
  public String getAssetEventType() {
    return assetEventType;
  }

  public void setAssetEventType(String assetEventType) {
    this.assetEventType = assetEventType;
  }

  public NftHistory value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @Schema(description = "")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NftHistory nftHistory = (NftHistory) o;
    return Objects.equals(this.blockHeight, nftHistory.blockHeight) &&
        Objects.equals(this.blockTime, nftHistory.blockTime) &&
        Objects.equals(this.txHash, nftHistory.txHash) &&
        Objects.equals(this.sender, nftHistory.sender) &&
        Objects.equals(this.recipient, nftHistory.recipient) &&
        Objects.equals(this.contract, nftHistory.contract) &&
        Objects.equals(this.assetEventType, nftHistory.assetEventType) &&
        Objects.equals(this.value, nftHistory.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockHeight, blockTime, txHash, sender, recipient, contract, assetEventType, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NftHistory {\n");
    
    sb.append("    blockHeight: ").append(toIndentedString(blockHeight)).append("\n");
    sb.append("    blockTime: ").append(toIndentedString(blockTime)).append("\n");
    sb.append("    txHash: ").append(toIndentedString(txHash)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    contract: ").append(toIndentedString(contract)).append("\n");
    sb.append("    assetEventType: ").append(toIndentedString(assetEventType)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
